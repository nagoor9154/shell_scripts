set +x
this_command=""
previous_command=""
EncryptCommon="NO"
function mailAbnormalTerminate {
	echo
	echo Last command executed:
	echo $previous_command
	tail -30 ../builds/$BUILD_NUMBER/log > temp/buildLogTail.txt
	echo $(date): Abnormal terminate.
	cd $WORKSPACE
	MailAdress="";
	IFS=',' read -a array <<< "$BuildFailMail"
    for element in "${array[@]}"
	do
		MailAdress="$MailAdress""$element@suntecgroup.com "
	done
	echo mailing build Abnormal terminate to $MailAdress
		
	cp $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/BuildAbonrmalTerminateMail.txt ../builds/$BUILD_NUMBER/mails/BuildAbonrmalTerminateMail.txt
	sed -i '/@BuildLog@/r  temp/buildLogTail.txt' ../builds/$BUILD_NUMBER/mails/BuildAbonrmalTerminateMail.txt
	sed -i '/@BuildLog@/d' ../builds/$BUILD_NUMBER/mails/BuildAbonrmalTerminateMail.txt
	echo : "Failed"
	mailx -s "Build Terminated" $MailAdress <../builds/$BUILD_NUMBER/mails/BuildAbonrmalTerminateMail.txt
	exit 100
}

#set -e
trap 'mailAbnormalTerminate' ERR
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG


cd $WORKSPACE
if [ -d "temp" ];then
	    rm -r temp
fi
mkdir temp

mkdir ../builds/$BUILD_NUMBER/mails
startTime=$(date)
repoUrl=$GIT_URL
branchName=$GIT_BRANCH 
headCommit=$GIT_COMMIT
shopt -s extglob
branchName="${branchName##*( )}"
shopt -u extglob

baseLabel=RELEASE_FLOATING
basePackFolder="$JOB_NAME"_Base
basePackName="$JOB_NAME"_Base
baseSetupfile="XLRT_Main_Setup.txt"

deltaLabel="$JOB_NAME"_DELTA
deltaPackFolder="$JOB_NAME"_Delta
deltaPackName="$JOB_NAME"_Delta
deltaSetupfile="XLRT_Main_Setup.txt"


cd $WORKSPACE
JenkinsProject=PLATFORM_6.1
BranchNameC="origin/PLATFORM_6.1"
AppServer=Jboss
EARType=TBMS_F
ServerName=sbstpvmlx2010 
releaseServer=sbstpvmlx833  
OraVersion=11g
verifyScript=N
pmsDB=PRODPMS
TestTools=None
#BuildFailMail=krishnaprasadp,release_helpdesk,manjum,greeshmask,vidyag
#ReleaseMail=krishnaprasadp,release_helpdesk,manjum,greeshmask,vidyag
BuildFailMail=krishnaprasadp,release_helpdesk
ReleaseMail=krishnaprasadp,release_helpdesk

cd $WORKSPACE
upperAppServer=`echo "$AppServer" | tr '[:lower:]' '[:upper:]'`

if [ -d ../builds/lastSuccessfulBuild ];then
  	deltaCommitIDRef=`cat ../builds/lastSuccessfulBuild/headCommit| (head -n1)`
  	echo $deltaCommitIDRef    	  	
  	if ((xxx=`/usr/bin/git rev-list -1 $deltaLabel`));then
  	  deltaCommitID=$(/usr/bin/git rev-list -1 $deltaLabel)  	  
  	  if  [ "$deltaCommitID" != "$deltaCommitIDRef" ]; then
  	     echo "Delta commit in DB not matching with commit id of lastSuccessfulBuild  "
  	     mailAbnormalTerminate
  	  fi
  	else
  		deltaCommitID=$deltaCommitIDRef  		
  	fi 	  	
else
	set -x
	/usr/bin/git tag -f "$JOB_NAME"_DELTA  $baseLabel
	deltaCommitID=$(/usr/bin/git rev-list -1 $deltaLabel)	
	echo $(date): Automation: "Successfully tagged. "
	
	set +x
fi

cd $WORKSPACE
#deltaCommitID=$(/usr/bin/git rev-list -1 $deltaLabel)
baseCommitID=$(/usr/bin/git rev-list -1 $baseLabel)


cd $WORKSPACE
if [ "$branchName" != "$BranchNameC" ]; then
  echo "Current repository branch name $branchName not matching with configure Branch $BranchNameC"
   mailAbnormalTerminate
fi

if [ "$OraVersion" == "11g" ]; then
   echo 
elif [ "$OraVersion" == "10g" ]; then
   echo
else
   echo Oracle version $OraVersion specified for the project is wrong.
   mailAbnormalTerminate
fi

if [ "$pmsDB" == "PRODPMS" ]; then
	pmsConfig="PRODPMSConfig.properties"
elif [ "$pmsDB" == "CSPMS" ]; then
	pmsConfig="CSPMSConfig.properties"
else
   echo "PMS DB "$pmsDB is not valid.
   mailAbnormalTerminate
fi

if [ "$verifyScript" == "Y" ]; then
	echo
elif [ "$verifyScript" == "N" ]; then
	echo
else
   echo verifyScript must be Y or N
   mailAbnormalTerminate
fi

if [ "$EARType" == "TBMS_F" ]; then
	echo
elif [ "$EARType" == "TBMS_T" ]; then
	echo
else
   echo EAR must be TBMS_F orTBMS_T
   mailAbnormalTerminate
fi

IFS=',' read -a array <<< "$TestTools"
for element in "${array[@]}"
do
	if [ "$element" == "Junit" ]; then
	  echo
	elif [ "$element" == "None" ]; then
	  echo
	else
	   echo "Unknown test tool specified $element"
	   mailAbnormalTerminate
	fi
done

DBObjectPath="DB-INSTALLATION/Platform/DBObjects"

echo
echo
echo StartTime			$startTime
echo Job name			$JOB_NAME
echo Repository         $repoUrl
echo Branch name		$branchName
echo Build commit ID	$headCommit
echo Base commit ID		$baseCommitID
echo delta commit id    $deltaCommitID
echo Appserver          $AppServer
echo Pack Structure     $packStru
echo EAR                $EARType
echo Deployment Server  $ServerName
echo Oracle Version     $OraVersion
echo

echo $(date): Automation : Generating pms list from commits.
	cd $WORKSPACE
		
	pmsList=""
	while read -r line
	do
		if ((p1=`expr index "$line" [`));then
		  if ((p2=`expr index "$line" ]`));then
		    length=`expr $p2 - $p1`
		    length=`expr $length - 5`
		    p1=`expr $p1 + 4`
		    
		    PmsNo=${line:$p1:$length}
		    IFS=', ' read -a array <<< "$PmsNo"
		    for element in "${array[@]}"
			do
			    pmsList="$pmsList""$element",
			     ###### for demo
				    #echo "$element Module test passed." >> $packFolder/ModuleTestPassed.txt
				 ######
			done
		  fi
		fi
    done  < <( /usr/bin/git rev-list --pretty=format:%s $baseCommitID..$headCommit)
    pmsList=\"$pmsList\"
    
    echo $(date): Automation : Identifying PMS in status 'Module test passed'
	java -Xms50M -Xmx200M -jar $HOME/pmsTest/VerifyPMS_New.jar $JENKINS_HOME/pmsTest/$pmsConfig $pmsList >temp/ModuleTestPassed.org
	cat temp/ModuleTestPassed.org|sort|uniq >temp/ModuleTestPassedPMS.txt
	chmod 777 -R temp
	sed -i 's#null#NA#g' temp/ModuleTestPassedPMS.txt
	

cd $WORKSPACE
if grep -i  "Started by timer" ../builds/$BUILD_NUMBER/log; then
	if grep -i --fixed-strings "Module test passed." "./temp/ModuleTestPassedPMS.txt"; then
		echo " There are MTP status PMS's available. So the build continues"
		echo " Platform Y" > $JENKINS_HOME/Verification.txt
	else
		if (aaa=`/usr/bin/git rev-list -n 1 "$JOB_NAME"_Last_Build`); then		
			lastBuildCommitID=$(/usr/bin/git rev-list -n 1 "$JOB_NAME"_Last_Build)
			baseCommit=$(/usr/bin/git rev-list -n 1 "$baseLabel")
			echo "commit id is set to '$lastBuildCommitID'"		
			echo "commit id is set to '$baseCommit'"												
		else 		
			lastBuildCommitID=$(/usr/bin/git rev-list -n 1 $baseLabel)
			/usr/bin/git tag -f "$JOB_NAME"_Last_Build $lastBuildCommitID
		fi			
		cd $WORKSPACE
		#if [[ "$lastBuildCommitID" != "$headCommit" ]]; then	
		if [[ "$baseCommit" != "$headCommit" ]]; then	
			echo " There is new commits has been made after the "$lastBuildCommitID" commit. So build continues"
			rm -rf $JENKINS_HOME/Verification.txt
			echo " Platform Y" > $JENKINS_HOME/Verification.txt
		else
			echo " Build started automatically and new commits are not available after the "$baseCommit" commit. So build stopped"
			#exit 1
		fi
	fi
else
	rm -rf $JENKINS_HOME/Verification.txt
	echo " Platform Y" > $JENKINS_HOME/Verification.txt
	echo " Build started by user. So the build continues"
fi

if [ -f "startMark" ];then
	rm startMark
fi
echo $(date) >startMark

export PATH=$PATH:/etc/alternatives

sed -i 's/\r//' ./ProcessingComponents/ProcessContainerInstaller/resources/Installer/build.sh
#chmod 755 ./ProcessingComponents/ProcessContainerInstaller/resources/Installer/build.sh
chmod 777 -R ./ProcessingComponents/


sed -i 's/\r//' $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/cleanup.sh
sed -i 's/\r//' $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/deploy.sh
sed -i 's/\r//' $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/setupdb.sql
sed -i 's/\r//' $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/cleanDB.sql
sed -i 's/\r//' $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/wrapsql.sh
sed -i 's/\r//' $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/wrapsqlConfig.sh
sed -i 's/\r//' $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/pmsStatusCheck.sh

chmod 755 $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/cleanup.sh
chmod 755 $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/deploy.sh
chmod 755 $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/setupdb.sql
chmod 755 $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/cleanDB.sql
chmod 755 $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/wrapsql.sh
chmod 755 $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/wrapsqlConfig.sh
chmod 755 $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/pmsStatusCheck.sh

chmod 777 -R /var/lib/jenkins/ant-1.7.0

rm -rf /var/lib/jenkins/.m2/*

export ANT_HOME=/var/lib/jenkins/ant-1.7.0
#export MAVEN_HOME=/var/lib/jenkins/maven/apache-maven-3.0
export MAVEN_HOME=/var/lib/jenkins/maven/mavenFrm1314/apache-maven-3.0
export MAVEN_OPTS="-Xmx2048m"
#export JAVA_HOME=/var/lib/jenkins/java/jdk1.6.0_45
#export PATH=/usr/kerberos/bin:/usr/bin:/bin:/usr/bin:/var/lib/jenkins/maven/mavenFrm1314/apache-maven-3.0/bin:/var/lib/jenkins/java/jdk1.6.0_45/bin
export JAVA_HOME=/var/lib/jenkins/java/jdk1.7.0_45
export FLEX_HOME=/opt/flexsdk
export PATH=/usr/kerberos/bin:/usr/bin:/bin:/usr/bin:/var/lib/jenkins/maven/mavenFrm1314/apache-maven-3.0/bin:/var/lib/jenkins/java/jdk1.7.0_45/bin:/opt/flexsdk/bin
#export PATH=/usr/kerberos/bin:/usr/bin:/bin:/usr/bin:/var/lib/jenkins/maven/mavenFrm1314/apache-maven-3.0/bin


/usr/bin/git diff --diff-filter=MACR --name-only $baseCommitID $headCommit > temp/delta.txt

BuildErrors="No"
echo $(date): Automation : Building ProcessingComponents
cd $WORKSPACE

#if grep -i "/var/abcd" temp/delta.txt; then
#if grep -i "^ProcessingComponents" temp/delta.txt; then
	echo $(date): Automation : "PC build started"
	if [[ $TestTools == *Junit* ]];then
		echo Junit enabled for maven build ProcessingComponents
		export MAVEN_OPTS=-Xss1024k
		if !($MAVEN_HOME/bin/mvn clean -B  -f ProcessingComponents/pom.xml --settings BuildSetup/PC/settings.xml install );then
		   BuildErrors="Build processing components failed. "
		fi
	else
	echo Junit disbaled for maven build ProcessingComponents
		export MAVEN_OPTS=-Xss1024k
		###########
		###Delete the below Command used
		###
		#if !($MAVEN_HOME/bin/mvn clean -B -DskipTests -f ProcessingComponents/pom.xml --settings BuildSetup/PC/settings.xml  install); then
			#BuildErrors="No"
		#fi
		###
		###
		###########
		if !($MAVEN_HOME/bin/mvn clean -B -DskipTests -f ProcessingComponents/pom.xml --settings BuildSetup/PC/settings.xml  install );then
      		BuildErrors="Build processing components failed. "
		fi
	fi
#else
	#echo $(date) : Automation : "PC build skipped."
#fi
#fi

export JAVA_HOME=/var/lib/jenkins/java/jdk1.7.0_45
export PATH=/usr/kerberos/bin:/usr/bin:/bin:/usr/bin:/var/lib/jenkins/maven/mavenFrm1314/apache-maven-3.0/bin:/var/lib/jenkins/java/jdk1.7.0_45/bin

#if grep -i "/var/abcd" temp/delta.txt; then
cd $WORKSPACE
if grep -i "^StandaloneExecutables" temp/delta.txt; then
	echo $(date): Automation : Building Standalone Executables	
		if !($ANT_HOME/bin/ant -f StandaloneExecutables/tbms_executables.xml ALL); then
			BuildErrors="StandaloneExecutables build failed. "
		fi	
else
	echo $(date): Automation : StandaloneExecutables build skipped.
fi
#fi

#if grep -i "/var/abcd" temp/delta.txt; then
if grep -i "^UI_Services" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareBaseDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareProcessDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareWrapperDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCarePlatformValidator" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCareExtendedValidator" temp/delta.txt || grep -i "^ProcessingComponents/ORM/Orm-Impl" || grep -i "^ProcessingComponents/TPE" temp/delta.txt || grep -i "^ProcessingComponents/PlatformValidator" temp/delta.txt  || grep -i "^ProcessingComponents/ORM/Orm-Api" temp/delta.txt; then
	IFS=',' read -a array <<< "$AppServer"
	for element in "${array[@]}"
	do
		echo $(date): Automation : Building UserInterface
		cd $WORKSPACE
		if [ "$element" == "Jboss" ] ; then
			cd $WORKSPACE/UI_Services
			if !($MAVEN_HOME/bin/mvn clean install -D build=P,JB  --settings $WORKSPACE/BuildSetup/PC/settings.xml);then
				BuildErrors="build UserInterface failed. "
			fi
		fi
	done	
		echo $(date): Automation : Building UserInterface-PC
	if !($MAVEN_HOME/bin/mvn clean install -D build=P,PC  --settings $WORKSPACE/BuildSetup/PC/settings.xml);then
		BuildErrors="build UserInterface PC failed. "
	fi
else
	echo $(date): Automation : "Ear Build skipped ."
fi   

cd $WORKSPACE
/usr/bin/git tag -f "$JOB_NAME"_Last_Build $headCommit

scriptBase="none"
setupfile="none"
for baseNo in 1 2
do
    #This is for delta based on last successful build
    if [ $baseNo -eq 1 ]; then
    	scriptBase=$deltaLabel
    	scriptCommitID=$deltaCommitID    
    	packFolder="$WORKSPACE"/"$deltaPackFolder"    	
    	setupfile=$packFolder/$DBObjectPath/$deltaSetupfile  
    	packName=$deltaPackName     	
        scriptMessage="modified after last successful build."
    fi
    
    #This is for delta based on last base created manually
    if [ $baseNo -eq 2 ]; then
    	scriptBase=$baseLabel
    	scriptCommitID=$baseCommitID
    	packFolder="$WORKSPACE"/"$basePackFolder"
    	setupfile=$packFolder/$DBObjectPath/$baseSetupfile	
    	packName=$basePackName        	
    	scriptMessage="modified after current build base marked in repository."
    fi    
    
    cd $WORKSPACE
	echo ""
	if  [ "$BuildErrors" == "No" ];then
		echo $(date): Automation : Packing Application $packName
	else
		echo $(date): Automation : $BuildErrors.
		echo $(date): Automation : Packing DB scripts and packages for verification [ $packName ]		
	fi
	if [ -d "wrapsql" ];then
	    rm -r wrapsql
	fi
	mkdir wrapsql
		
	if [ -d $packFolder ];then
		rm -rf $packFolder
	fi	
	mkdir -p $packFolder/$DBObjectPath
	
	cd $WORKSPACE
	
	/usr/bin/git diff --name-only  "$scriptBase"  -- DBObjects-ORCL >temp/files.txt
	
	echo $(date): Automation : Preparing pl/sql packages for wrapping
	while read -r line
	do
			while read -r line0
			do
				if grep -i "$line0" temp/files.txt && [ "$line" != "General" ]; then
					mkdir -p wrapsql/DBObjects/$line/Plbs/$OraVersion
			 	  	line1="${line0/DBObjects-ORCL\//wrapsql/DBObjects/}"
			 	  	line1="${line1/\/Packages\///Plbs/$OraVersion/}"			 	
				    cp -f $line0 $line1
			 	fi
			 	if grep -i "$line0" temp/files.txt && [ "$line" == "General" ]; then
					mkdir -p wrapsql/DBObjects/Main/Plbs/$OraVersion
			 	  	line1="${line0/DBObjects-ORCL\/$line\//wrapsql/DBObjects/Main/}"
			 	  	line1="${line1/\/Packages\///Plbs/$OraVersion/}"			 	
				    cp -f $line0 $line1
			 	fi
			done  < <(find DBObjects-ORCL/$line/Packages  -maxdepth 1 -iname '*.sql' -print)			
	done  < <(ls -1 ./DBObjects-ORCL)
	
	if (ssh jenkins@$ServerName "[ -d $JOB_NAME/wrapsql ]"); then
	  ssh jenkins@$ServerName rm -r $JOB_NAME/wrapsql
	fi

	scp -r wrapsql jenkins@$ServerName:$JOB_NAME/
	scp  $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/wrapsql.sh jenkins@$ServerName:$JOB_NAME/wrapsql/
	ssh jenkins@$ServerName sh $JOB_NAME/wrapsql/wrapsql.sh $JOB_NAME

	echo $(date): Automation : Copying plbs to pack
	if (ssh jenkins@$ServerName "[ -d $JOB_NAME/wrapsql/DBObjects ]"); then	
		scp -p -r jenkins@$ServerName:/home/jenkins/$JOB_NAME/wrapsql/DBObjects/*  "$packFolder"/"$DBObjectPath"
	fi
	
	echo $(date): Automation : Copying UserHooks to pack
	while read -r line
	do
  		if [ -d "DBObjects-ORCL/$line/Packages/UserHooks" ]; then	      	  		  
	  	while read -r line1
		do 
			if grep -i "$line1" temp/files.txt && [ "$line" != "General" ]; then
				target="$packFolder/"$DBObjectPath"/$line/Plbs/$OraVersion/UserHooks"	
				if ! [ -d $target ];then
					mkdir -p $target
				fi
				echo "     $line1 to $target"    
			    cp --preserve=timestamps -f  $line1 $target
		    fi
		    if grep -i "$line1" temp/files.txt && [ "$line" == "General" ]; then
				target="$packFolder/"$DBObjectPath"/Main/Plbs/$OraVersion/UserHooks"	
				if ! [ -d $target ];then
					mkdir -p $target
				fi
				echo "     $line1 to $target"    
			    cp --preserve=timestamps -f  $line1 $target
		    fi
	    done  < <(find DBObjects-ORCL/$line/Packages/UserHooks/*.sql -maxdepth 1 -iname '*.sql' -print)
		fi
	done  < <(ls -1 DBObjects-ORCL)
	
	echo $(date): Automation : Copying Alter scripts to pack
	while read -r line
	do	      		  
  		while read -r line1
  		do 
  		if grep -i "$line1" temp/files.txt && [ "$line" != "General" ]; then
  			target="$packFolder/"$DBObjectPath"/$line/Schema/Alter" 
	  		if ! [ -d $target ];then  
	      		mkdir -p $target
	  		fi
       		echo "     $line1 to $target"    
       		cp --preserve=timestamps -f  $line1 $target
   		fi
   		if grep -i "$line1" temp/files.txt && [ "$line" == "General" ]; then
  			target="$packFolder/"$DBObjectPath"/Main/Schema/Alter" 
	  		if ! [ -d $target ];then  
	      		mkdir -p $target
	  		fi
       		echo "     $line1 to $target"    
       		cp --preserve=timestamps -f  $line1 $target
   		fi
 		done  < <(find DBObjects-ORCL/$line/Schema/Alter -type f -print)
	done  < <(ls -1 ./DBObjects-ORCL)
	
	echo $(date): Automation : Copying Data scripts to pack
	while read -r line
	do	      		  
  		while read -r line1
  		do 
  		if grep -i "$line1" temp/files.txt && [ "$line" != "General" ]; then
  			target="$packFolder/"$DBObjectPath"/$line/Schema/Data" 
	  		if ! [ -d $target ];then  
	      		mkdir -p $target
	  		fi
       		echo "     $line1 to $target"    
       		cp --preserve=timestamps -f  $line1 $target
   		fi
   		if grep -i "$line1" temp/files.txt && [ "$line" == "General" ]; then
  			target="$packFolder/"$DBObjectPath"/Main/Schema/Data" 
	  		if ! [ -d $target ];then  
	      		mkdir -p $target
	  		fi
       		echo "     $line1 to $target"    
       		cp --preserve=timestamps -f  $line1 $target
   		fi
 		done  < <(find DBObjects-ORCL/$line/Schema/Data -type f -print)
	done  < <(ls -1 ./DBObjects-ORCL)
	
	##################################
	if grep -i "DBObjects-ORCL/UserInterface" temp/files.txt > temp/userFiles.txt; then
		if ! [ -d "$packFolder/DB-INSTALLATION" ]; then
			mkdir -p $packFolder/DB-INSTALLATION
		fi
	
		sed -i "s/.*/cp --parents '&' folder\/DB-INSTALLATION/" temp/userFiles.txt
		sed -i "s@folder@$packFolder@" temp/userFiles.txt
		chmod 777 temp/userFiles.txt
		./temp/userFiles.txt
		mv $packFolder/DB-INSTALLATION/DBObjects-ORCL/* $packFolder/DB-INSTALLATION/Platform/DBObjects
		rm -rf $packFolder/DB-INSTALLATION/DBObjects-ORCL
	fi
	
	if  [ "$BuildErrors" == "No" ];then
		echo "$(date): Automation : Copying Deployable services to pack"
		pcRootFolder="$packFolder"/SERVICES/Installer
		serviceTarget="$packFolder"/SERVICES/DeployableServices
					
		if grep -i "^ProcessingComponents/AuditLog" temp/delta.txt || grep -i "^ProcessingComponents/DataGrid" temp/delta.txt || grep -i "^ProcessingComponents/ProcessContainer" temp/delta.txt || grep -i "^ProcessingComponents/ProcessContainerAgent" temp/delta.txt || grep -i "^ProcessingComponents/ProcessContainerInstaller" temp/delta.txt; then
			source=ProcessingComponents/ProcessContainerInstaller/deploy/ProcessContainerInstaller-bin.zip		
			target=$pcRootFolder
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		if grep -i "^ProcessingComponents/TPE" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCarePlatformValidator" temp/delta.txt || grep -i "^ProcessingComponents/ServiceUtilities" temp/delta.txt || grep -i "^ProcessingComponents/ORM/Orm-Impl" temp/delta.txt; then
			source=ProcessingComponents/TPE/TPECore/deploy/tbms-tpe.sar	
			target=$serviceTarget/Tpe
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		if grep -i "^ProcessingComponents/ProcessContainer/TPETools" temp/delta.txt; then
			source=ProcessingComponents/ProcessContainer/TPETools/SourceBuilder/deploy/tpe-tools.zip
			target=$pcRootFolder
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target	
		fi
		
		if grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareWrapperDO" temp/delta.txt; then
			source=ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareWrapperDO/deploy/*
			target=$pcRootFolder
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps -rf $source $target	
		fi
		
		if grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareProcessDO" temp/delta.txt; then
			source=ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareProcessDO/deploy/*
			target=$pcRootFolder
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps -rf $source $target	
		fi
		
		if grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareBaseDO" temp/delta.txt; then
			source=ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareBaseDO/deploy/*
			target=$pcRootFolder
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps -rf $source $target	
		fi		
		
		
		if grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCareExtendedValidator" temp/delta.txt; then
			source=ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCareExtendedValidator/deploy/*
			target=$pcRootFolder
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps -rf $source $target	
		fi
		
		if grep -i "^ProcessingComponents/TPE/CustomerCareProcessWrapper" temp/delta.txt; then
			source=ProcessingComponents/TPE/CustomerCareProcessWrapper/deploy/*
			target=$pcRootFolder
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps -rf $source $target	
		fi
	
		if grep -i "^ProcessingComponents/FileUploadValidator" temp/delta.txt; then
			source=ProcessingComponents/FileUploadValidator/deploy/FileUploadValidator.sar		
			target=$serviceTarget/FileUploadValidator
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi	
		
		
		if grep -i "^ProcessingComponents/ReprocessService" temp/delta.txt; then
			source=ProcessingComponents/ReprocessService/deploy/reprocess-service.sar	
			target=$serviceTarget/ReprocessService
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
			
		
		if grep -i "^ProcessingComponents/HealthCheckService" temp/delta.txt; then
			source=ProcessingComponents/HealthCheckService/ServiceModule/deploy/healthcheck.sar		
			target=$serviceTarget/HealthCheckService
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		#XelerateConsolidationService
		if grep -i "^ProcessingComponents/XelerateConsolidationService" temp/delta.txt; then
			source=ProcessingComponents/XelerateConsolidationService/deploy/xelerate-consolidation-service.sar		
			target=$serviceTarget/XelerateConsolidationService
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		if grep -i "^ProcessingComponents/ORM/Orm-Api" temp/delta.txt; then
			source=ProcessingComponents/ORM/Orm-Api/deploy/xelerateorm-api.jar	
			target=$pcRootFolder/plugins
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		##Change ORM-IMPL Added:
		
		if grep -i "^ProcessingComponents/ORM/Orm-Impl" temp/delta.txt; then
			source=ProcessingComponents/ORM/Orm-Impl/deploy/xelerateorm-impl.jar	
			target=$pcRootFolder/plugins
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		##Change Platform Validator Added:
		
		if grep -i "^ProcessingComponents/PlatformValidator" temp/delta.txt; then
			source=ProcessingComponents/PlatformValidator/deploy/platform-validator.jar	
			target=$pcRootFolder/plugins
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		##Change MakerCheckerUtilities Added:
		
		if grep -i "^ProcessingComponents/MakerCheckerUtilities" temp/delta.txt; then
			source=ProcessingComponents/MakerCheckerUtilities/MakerCheckerAPI/deploy/MakerCheckerAPI.jar	
			target=$pcRootFolder/plugins
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		##Change UpdateUserStatus Added:
		if grep -i "^ProcessingComponents/UpdateUserStatus" temp/delta.txt; then
			source=ProcessingComponents/UpdateUserStatus/deploy/UpdateUserStatus.sar		
			target=$serviceTarget/UpdateUserStatus
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi	
		
		if grep -i "^ProcessingComponents/PURGE" temp/delta.txt; then
			source=ProcessingComponents/PURGE/deploy/tbms-purge.sar	
			target=$serviceTarget/Purge
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		#if grep "^ProcessingComponents/TBMSCollectorServices" temp/delta.txt; then
			#source=ProcessingComponents/TBMSCollectorServices/deploy/*
			#target=$serviceTarget/CollectorServices
			#if ! [ -d $target ];then
				#mkdir -p $target
			#fi
			#echo "     $source to $target"
			#cp --preserve=timestamps $source $target
		#fi
		
		if grep -i "^ProcessingComponents/TBMSServices" temp/delta.txt; then
			source=ProcessingComponents/TBMSServices/deploy/invoicing.sar		
			target=$serviceTarget/InvoicingServices
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		if grep -i "^ProcessingComponents/WorkflowAPI" temp/delta.txt; then
			source=ProcessingComponents/WorkflowAPI/deploy/workflowApi.sar		
			target=$serviceTarget/WorkflowAPI
			if ! [ -d $target ];then
				mkdir -p $target
			fi
			echo "     $source to $target"
			cp --preserve=timestamps $source $target
		fi
		
		#if grep "^TPEGUI" temp/delta.txt; then
			#source=TPEGUI/Release/TPEGUI/*
			#target=$packFolder/DB-INSTALLATION/UserInterface/$AppServer
			#if ! [ -d $target ];then
		    	#mkdir -p $target
		    	#fi
			#echo "     $source to $target"
			#cp -rf --preserve=timestamps $source $target
		#fi
		
		#if grep "^UserInterface/WorkflowEngine" temp/delta.txt; then
			#source=WorkflowEngine/deploy/$AppServer 
			#target=$packFolder/DB-INSTALLATION/UserInterface/$AppServer/WorkflowEngine
			#if ! [ -d $target ];then
		    	#mkdir -p $target
		    	#fi
			#echo "     $source to $target"
			#cp -rf --preserve=timestamps $source $target
		#fi		
		
		while read -r line
		do
			if grep -i "StandaloneExecutables/$line" temp/delta.txt && [ "$line" != "lib" ] && [ "$line" != "obsolete" ] && ! [ -f "$line" ] && [ "$line" != "tbms_executables.xml" ] && [ "$line" != "TBMSLOGIN.INI" ] && [ "$line" != "TBMS JAVA EXECUTABLE JARS BUILD MANUAL.odt" ] && [ "$line" != "build.properties" ] && [ "$line" != ".project" ] && [ "$line" != ".gitignore" ] && [ "$line" != ".classpath" ]; then
				target=$packFolder/UTILITY_MODULES/Tools/$line
				if ! [ -d "$target" ]; then
					mkdir -p "$target"
				fi
				source=StandaloneExecutables/deploy/$line/*
				echo " $source $target"
				cp -rf --preserve=timestamps $source $target
			fi
		done < <(ls -1 ./StandaloneExecutables)
		
		echo "$(date): Automation : Copying EAR to pack "
		IFS=',' read -a array <<< "$AppServer"
		for element in "${array[@]}"
		do
			if [[ "$element" != Weblogic ]]; then
			if grep -i "^UI_Services" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareBaseDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareProcessDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareWrapperDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCarePlatformValidator" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCareExtendedValidator" temp/delta.txt || grep -i "^ProcessingComponents/ORM/Orm-Impl" temp/delta.txt || grep -i "^ProcessingComponents/ORM/Orm-Api" temp/delta.txt; then
				source1=UI_Services/deploy/platform/$element/*	
				source2=UI_Services/deploy/WorkFlowEngine/platform/$element/*	
				target1=$packFolder/USER-INTERFACE/$element/EAR
				target2=$packFolder/USER-INTERFACE/$element/WorkFlowEngine
				if ! [ -d "$target1" ]; then
					mkdir -p $target1
				fi
				if ! [ -d "$target2" ]; then
					mkdir -p $target2
				fi
				echo "     $source1 to $target1"
				echo "     $source2 to $target2"
				cp --preserve=timestamps -r $source1 $target1
				cp --preserve=timestamps -r $source2 $target2
			fi	
			fi
		done
		#delete
				#
			    #
			    #
			    #
		#this
		
if grep -i "^UI_Services" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareBaseDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareProcessDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareDO/CustomerCareWrapperDO" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCarePlatformValidator" temp/delta.txt || grep -i "^ProcessingComponents/CustomerCareUtilities/CustomerCareBasicValidator/CustomerCareExtendedValidator" temp/delta.txt || grep -i "^ProcessingComponents/ORM/Orm-Impl" temp/delta.txt || grep -i "^ProcessingComponents/ORM/Orm-Api" temp/delta.txt; then
			source1=UI_Services/deploy/platform/PC/*
			source2=UI_Services/deploy/platform/TPE/*
			target1=$serviceTarget/XelerateService
			target2=$pcRootFolder
			if ! [ -d "$target1" ]; then
					mkdir -p $target1
			fi
			if ! [ -d "$target2" ]; then
					mkdir -p $target2
			fi
			echo "     $source1 $source2 to $target1 $target2"
			cp --preserve=timestamps -rf $source1 $target1
			cp --preserve=timestamps -rf $source2 $target2
		fi	
	fi
	
	if [ -d "$WORKSPACE"/BuildSetup/Installer ]; then
		if ! [ -d "$packFolder/DB-INSTALLATION" ]; then
			mkdir -p $packFolder/DB-INSTALLATION
		fi
		cp -rf "$WORKSPACE"/BuildSetup/Installer "$packFolder"/DB-INSTALLATION
	fi
	
	##Copying Global folder to pack
	
	if [ -d "$WORKSPACE"/DBObjects-ORCL/Global ]; then
		if ! [ -d "$packFolder/DB-INSTALLATION/Platform/DBObjects" ]; then
			mkdir -p $packFolder/DB-INSTALLATION/Platform/DBObjects
		fi
		cp -rf "$WORKSPACE"/DBObjects-ORCL/Global "$packFolder"/DB-INSTALLATION/Platform/DBObjects
	fi
		
##Setting.xml copying to Pack  BELOW
	
	cd $WORKSPACE
	Settingspath="$JENKINS_HOME/jobs/BuildFiles/Platform_6/Settings"
	DBInstallerPath="DB-INSTALLATION/Installer/conf"
	
	if grep -i "DBObjects-ORCL/Tpe" temp/files.txt || grep -i "DBObjects-ORCL/Main" temp/files.txt || grep -i "DBObjects-ORCL/Global" temp/files.txt  || grep -i "DBObjects-ORCL/Framework" temp/files.txt && grep -i "DBObjects-ORCL/UserInterface" temp/files.txt; then
		echo " Both UI and DB Exists ProfileDB copiying to Pack"
		target="$packFolder/$DBInstallerPath"
		if ! [ -d "$target" ]; then
			mkdir -p "$target"
		fi
		cp -rf $Settingspath/ProfileDB/* $target	
	else		
		echo "Both Profile and DB condition not satisfied"
	fi
	
	
	if grep -i "DBObjects-ORCL/Tpe" temp/files.txt || grep -i "DBObjects-ORCL/Main" temp/files.txt || grep -i "DBObjects-ORCL/Global" temp/files.txt  || grep -i "DBObjects-ORCL/Framework" temp/files.txt; then
		if grep -i "DBObjects-ORCL/UserInterface" temp/files.txt; then
			echo " settings file Already copied to DBInstallerPath"
		else
			echo "DBonly copied to target path"			
			target="$packFolder/$DBInstallerPath"
			if ! [ -d "$target" ]; then
				mkdir -p "$target"
			fi
		    cp -rf $Settingspath/DBOnly/* $target			
		fi
	else
		if grep -i "DBObjects-ORCL/UserInterface" temp/files.txt; then
			echo "Required settings already copied"
		else
			echo " NoChange Settings is copying"
			target="$packFolder/$DBInstallerPath"
			if ! [ -d "$target" ]; then
				mkdir -p "$target"
			fi
		    cp -rf $Settingspath/NoChange/* $target
		    echo $Settingspath/NoChange/* copied to $target
		fi
	fi
	
	if grep -i "DBObjects-ORCL/UserInterface" temp/files.txt; then
		if grep -i "DBObjects-ORCL/Tpe" temp/files.txt || grep -i "DBObjects-ORCL/Main" temp/files.txt || grep -i "DBObjects-ORCL/Global" temp/files.txt  || grep -i "DBObjects-ORCL/Framework" temp/files.txt; then
			echo "Both settings file is already copied to target path"
		else
			echo "copying profile only settings file to target path"
			target="$packFolder/$DBInstallerPath"
			if ! [ -d "$target" ]; then
				mkdir -p "$target"
			fi
		    cp -rf $Settingspath/ProfileOnly/* $target
		fi
	fi
	
	
	##Setting.xml copying to Pack Ends here	
	
	
	
	
	
	
	if [ -d ProcessingComponents ]; then
		tar -cf ProcessingComponents.tar ProcessingComponents/
    	fi
    
    if [ -d UI_Services ]; then
   		tar -cf UI_Services.tar UI_Services/
    fi
	
	cd $WORKSPACE	
	
	if [ -s temp/files.txt ]; then

	    #?? XLRT_Main_Setup.txt  should conain line #REM BeginApplyingScripts
		#?? require fileOrder without path separator (\/)
		#?? possible issue datascript with pms_numbers
	    #?? currently file order is in ./Tools/Jenkins/fileOrder.txt
	    
	    echo "$(date): Automation : Creating $setupfile"	
	    
	    if ! [ -d "$packFolder/$DBObjectPath" ]; then
	    	mkdir -p $packFolder/$DBObjectPath
	    fi  
			
		cp --preserve=timestamps BuildSetup/DB-SetupScripts/Main/XLRT_Main_Setup.txt $setupfile
		
		/usr/bin/git diff --name-only  "$scriptBase"  -- DBObjects-ORCL >temp/files1.txt
	
		sed -i '/.gitkeep/d' temp/files1.txt
		for i in `cat temp/files1.txt`
		do 
			if [[ $i == */Global/* ]]; then      
				echo "$i"      
				sed -i "s@$i@REM@" temp/files1.txt
				fi
		done
		
		echo "$(date): Automation : adding package names to setup file"
	
		sed -i "1 iREM This setup file contain alter,data,userhooks and wrapped pl/sql packages" $setupfile
	    sed -i "2 iREM $scriptMessage" $setupfile
		sed -i "3 iREM Commitid $scriptCommitID" $setupfile
		sed -i "4 iREM ========================================================================" $setupfile
		sed -i "5 iREM" $setupfile
		
		cd $packFolder/$DBObjectPath
		cd ..
		pwd			
		while read -r line
		do
		  	echo $line >> $WORKSPACE/temp/userHooks.txt
		done  < <(find DBObjects -iname "*.sql" -print)
		
		while read -r line
		do
		  	echo $line >> $WORKSPACE/temp/packages.txt
		done  < <(find DBObjects -iname "*.plb" -print)
		
		
		cd $WORKSPACE
		echo "REM" >temp/packageMain.txt
		if [ -f "temp/userHooks.txt" ];then
		    echo "REM User hooks modified after commit $scriptCommitID" >>temp/packageMain.txt
		    echo "REM =========================================================================" >>temp/packageMain.txt
		   
			while read p; do			
	    		prompt="${p/Plbs\/$OraVersion\//Packages/}"
	    		echo prompt "$prompt" >>temp/packageMain.txt
				echo "@\`\`Root_directory/Platform/$p;" >>temp/packageMain.txt			
			done <temp/userHooks.txt
		fi
		
		echo "REM" >>temp/packageMain.txt
		echo "REM pl/sql packages modified after commit $scriptCommitID" >>temp/packageMain.txt
		echo "REM ==============================================================================" >>temp/packageMain.txt
		
		if [ -f "temp/packages.txt" ];then
			while read p; do	
				prompt="${p/Plbs\/$OraVersion\//Packages/}"
				prompt="${prompt/.plb/.sql}"		    
				echo prompt "$prompt" >>temp/packageMain.txt
				echo "@\`\`Root_directory/Platform/$p;" >>temp/packageMain.txt			
			done < temp/packages.txt
		fi
		
		sed -i '/BeginApplyingScripts/r temp/packageMain.txt' $setupfile
		
		echo $(date): Automation : adding data script names to setup file
		if grep -i --fixed-strings /Schema/Data/ temp/files1.txt > temp/data.txt ;then
		sed -i 's/General/Main/g' temp/data.txt
		sed -i 's/$/;/g' temp/data.txt
		
		        echo Data scripts copied to temp
			#while read p; do
			#	if [ -n "$p" ]; then
			#	  sed -i '/'$p'/{H;$!d;s/.*//};$G;s/\n*//' temp/data.txt
			#	fi
			#done <./Tools/Jenkins/fileOrder.txt
		fi
		
		echo "REM" >temp/dataMain.txt
	   	echo "REM Data scripts modified after commit $scriptCommitID" >>temp/dataMain.txt
	    	echo "REM ===========================================================================" >>temp/dataMain.txt
	   	
		while read line; do		
			echo prompt "$line" >>temp/dataMain.txt
			line1="${line/DBObjects-ORCL\//@\`\`Root_directory/Platform/DBObjects/}"
			echo $line1 >>temp/dataMain.txt	
		done < temp/data.txt
		
		#rootDir='@``Root_directory'
		#while read -r line
		#do 
			#if [[ "$line" == *$rootDir* ]]; then 
				#sed -e "s/$line/&;/g" temp/dataMain.txt
			#fi
		#done < temp/dataMain.txt
		
	  	sed -i '/BeginApplyingScripts/r temp/dataMain.txt' $setupfile
	
		echo $(date): Automation : adding alter script names to setup file
		if grep -i --fixed-strings /Schema/Alter/ temp/files1.txt > temp/alter.txt ;then
		sed -i 's/General/Main/g' temp/alter.txt
		sed -i 's/$/;/g' temp/alter.txt
		
			echo allterscripts added to temp file
			#while read p; do
			#	if [ -n "$p" ]; then
			#	  sed -i '/'$p'/{H;$!d;s/.*//};$G;s/\n*//' temp/alter.txt
			#	fi
			#done <./Tools/Jenkins/fileOrder.txt
		fi
	
		echo "REM" >temp/alterMain.txt
		echo "REM Alter scripts modified after commit $scriptCommitID" >>temp/alterMain.txt
		echo "REM ============================================================================" >> temp/alterMain.txt
			
		while read line; do
			echo prompt "$line" >>temp/alterMain.txt
			line1="${line/DBObjects-ORCL\//@\`\`Root_directory/Platform/DBObjects/}"
			echo $line1 >>temp/alterMain.txt		
		done <temp/alter.txt
		
		#rootDir='@``Root_directory'
		#while read -r line
		#do 
			#if [[ "$line" == *$rootDir* ]]; then 
				#sed -e "s/$line/&;/g" temp/alterMain.txt
			#fi
		#done < temp/alterMain.txt
		
		sed -i '/BeginApplyingScripts/r temp/alterMain.txt' $setupfile
		
		
		sed -i 's/\r//' $setupfile
	fi
	
	echo $(date): Automation : End packing $packName
	
	cd $WORKSPACE
	echo $(date): Automation : Verifying duplicate directories created due to case sensitivity of unix.
	duplicateDir="False"
	while read -r line
	do
	  echo $line
	  duplicateDir="True"
	done  < <(find  . -type d|sort| uniq -c -i -d)
	
	while read -r line
	do
	  echo $line
	  duplicateDir="True"
	done  < <(find  $packFolder -type d|sort| uniq -c -i -d)
	
	if [ $duplicateDir == "True" ];then
		echo Directories listed above created in duplicate due to case sensitivity. Make required corrections.
	    mailAbnormalTerminate
	fi
	
	echo $(date): Automation : Checking for old files.
	# verify pack for old files
	elapsedSec=$( expr  $(date +%s) - $(date +%s -r startMark) )
	#elaspedMin=$( expr $elapsedSec / 60 )
	find $packFolder -cmin +30 -print

   if grep -i "^PatchName" temp/ModuleTestPassed.org > temp/patchno.txt ; then
		sed -i 's/PatchName//g' temp/patchno.txt
		patchID=`cat temp/patchno.txt| (head -n1)`
	else
	   echo $(date): Automation :Patch name could not be resolved.
	   exit 1
	fi	
	echo patch number $patchID
	echo $(date): Automation : Creating Zip file.
					
	cd $WORKSPACE
	chmod 777 $packFolder
	cd $packFolder
	if [ -d "$patchID" ]; then
		rm -rf "$patchID"
	fi
	mkdir -p ./"$patchID"
	while read -r line
	do		
		if [ "$line" != "$patchID" ]; then			
			echo " $line directory created inside $patchID."
			mv "$line" "$patchID"/
			echo "$line" moved to $patchID		
		fi
	done < <(ls -1 ./)
	
	zip -r "$patchID".zip *	
	
	echo $(date): Automation : End packing $packName
		
done
#pack ends	
	
cd $WORKSPACE
echo
if [ "$verifyScript" == "Y" ]; then
	echo $(date): Automation : Applying Base pack $basePackName in database for verification
	ssh jenkins@$ServerName mkdir -p $JOB_NAME/install
	scp  $JENKINS_HOME/jenkinscripts/ProjectBuildScripts/cleanup.sh jenkins@$ServerName:$JOB_NAME/install/
	scp  $JENKINS_HOME/jenkinscripts/ProjectBuildScripts/deploy.sh jenkins@$ServerName:$JOB_NAME/install/
	scp  $JENKINS_HOME/jenkinscripts/ProjectBuildScripts/setupdb.sql jenkins@$ServerName:$JOB_NAME/install/
	scp  $JENKINS_HOME/jenkinscripts/ProjectBuildScripts/cleanDB.sql jenkins@$ServerName:$JOB_NAME/install/
	
	ssh jenkins@$ServerName $JOB_NAME/install/cleanup.sh $JOB_NAME $basePackName
	scp $basePackName.tar jenkins@$ServerName:$JOB_NAME/install/
	ssh jenkins@$ServerName tar -xf $JOB_NAME/install/$basePackName.tar -C $JOB_NAME/install
	
	#scp -r $JENKINS_HOME/PackStructure/Installer jenkins@$ServerName:$JOB_NAME/install/$basePackFolder
	#scp  $JENKINS_HOME/jenkinscripts/ProjectBuildScripts/$JOB_NAME/DB_SETUP.INI  jenkins@$ServerName:$JOB_NAME/install/$basePackFolder/Installer/conf
	#echo $(date): Automation : deployment starts.
	#ssh jenkins@$ServerName sh $JOB_NAME/install/deploy.sh $JOB_NAME $headCommit $baseCommitID $basePackFolder $dropSchema N 
	#scp jenkins@$ServerName:/home/jenkins/$JOB_NAME/install/$basePackFolder/Installer/logs/XELERATE_Installer.log ./temp
fi
echo $(date): Automation : Creating mails

#REMOVE FOLLOWING LINE
echo "REM EndApplyingScripts " > temp/XELERATE_Installer.log

PLSQLErrors="No"
startLog="NO"
echo "" > ../builds/$BUILD_NUMBER/BuildErrors.txt
echo "" >>$WORKSPACE/temp/allErrors.txt
prev_line="XelerateBuildErrors ........";
truncateAt=0
while read -r line
do
  #line=${line:33}
  #line="${line/DBObjects\/Plbs\/$OraVersion\//DBObjects-ORCL/}"
  #line="${line/.plb/.sql}"
 #?? if [[ "$line" == *Warning:* ]]; then
 #??  continue
 #?? fi
  if [[ "$line" == *BeginApplyingScripts* ]]; then
   startLog="YES"
  fi
  if [[ "$line" == *EndApplyingScripts* ]]; then
   echo  "$line"
   break
  fi
  if [[ "$line" == *DBObjects-ORCL/* ]]; then
   prev_line="$line"
   truncateAt=50;
   continue
  fi
  if [ "$startLog" == "YES" ]; then
    if [[ "$line" != *DBObjects-ORCL/* ]]; then
       if [ ! -z  "$prev_line" ]; then
         if [[ "$prev_line" == XelerateBuildErrors* ]]; then
           echo "" >> ../builds/$BUILD_NUMBER/BuildErrors.txt
         else
         	PLSQLErrors="Alter,Data or PLSQL has errors."
            source=$prev_line
            echo "" >> ../builds/$BUILD_NUMBER/BuildErrors.txt 
            if `/usr/bin/git log -n 1 --pretty=format:"Author:%an%n"  $source >> ../builds/$BUILD_NUMBER/BuildErrors.txt`;then
               echo "File: $source" >> ../builds/$BUILD_NUMBER/BuildErrors.txt
               echo "Type: Error"  >> ../builds/$BUILD_NUMBER/BuildErrors.txt 
            else
              
               echo "Author:NoAuthor" >> ../builds/$BUILD_NUMBER/BuildErrors.txt 
               #echo "MailId:NoAuthor" >> ../builds/$BUILD_NUMBER/BuildErrors.txt
               echo "File:$source" >> ../builds/$BUILD_NUMBER/BuildErrors.txt
               echo "Type:Error"  >> ../builds/$BUILD_NUMBER/BuildErrors.txt 
            fi
         fi
       fi
       if [ ! -z  "$line" ]; then
          lineTrimed=`echo "${line}" | sed -e 's/^[ \t]*//'`
          lenLine=${#line}
          lenTrimed=${#lineTrimed}
          pos=$(($lenLine - $lenTrimed))
          
          if [[ "$line" != *\ \ \ \** ]]; then
          #if [ "$pos" -lt "$truncateAt" ];then
          	truncateAt=$pos;
          #fi
          fi
          lineTrimed=${line:$truncateAt}
          if [[ "$line" == *BeginApplyingScripts* ]]; then 
            echo "" >> ../builds/$BUILD_NUMBER/BuildErrors.txt
          else
          	echo "       $lineTrimed" >> ../builds/$BUILD_NUMBER/BuildErrors.txt
          fi
          #   echo "$line"     
       fi
       prev_line=""
    fi
  fi
done  < temp/XELERATE_Installer.log


echo "java compile errors" >> ../builds/$BUILD_NUMBER/BuildErrors.txt

while read -r line
do
if  [[ "$line" == *\[javac\]* ]] || [[ "$line" == *\[ERROR\]* ]] ; then

    if [[ "$line" == */var/lib/jenkins/jobs* ]]; then
	    if grep -i --fixed-strings "$line" temp/allErrors.txt > temp/xxxx.txt;then
			continue
		fi
		   
    
        echo "$line" >>temp/allErrors.txt
	    line1=${line:8}    
	    if [[ "$line" == *\[ERROR\]* ]]; then 
			line1="${line1/] /]:}"	
	    fi
	    IFS=':' read -a array <<< "$line1"
	    if [ ${#array[@]} -gt 2 ] ; then
	    	source=${array[0]}
	    	source=${source/$WORKSPACE\//}
		    if `/usr/bin/git log -n 1 --pretty=format:"%nAuthor   :%an%n"  $source >> ../builds/$BUILD_NUMBER/BuildErrors.txt`;then
		       echo File     :$source >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		       if [ "${array[2]}" == "warning" ] || [ "${array[2]}" == " warning" ] ; then
		            warning="${array[3]}"
		            len=${#warning}
		            warning=${warning:1:$len - 4 }
		       	    if grep -i --fixed-strings "$warning" $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/$JOB_NAME/ExcludeWarnings.txt > temp/xxxx.txt;then
						continue
					fi
		       		echo Warning   :${array[3]} >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		       else
		       		echo Error    :${array[2]} >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		       fi
		       echo      Line/Col :${array[1]} >> ../builds/$BUILD_NUMBER/BuildErrors.txt
			#      echo " " >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		    else
		       echo " " >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		            echo "Author  :NoAuthor" >> ../builds/$BUILD_NUMBER/BuildErrors.txt 
		       #echo "MailId:NoAuthor" >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		       echo File     :$source >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		       if [ "${array[2]}" == "warning" ] || [ "${array[2]}" == " warning" ] ; then
		            warning="${array[3]}"
		            len=${#warning}
		            warning=${warning:1:$len - 4 }
		       		if `grep -i --fixed-strings "$warning" $JENKINS_HOME/jenkinscripts/ProjectBuildScripts/$JOB_NAME/ExcludeWarnings.txt > temp/xxxx.txt` ;then
						continue
					fi
		       		echo Warning   :${array[3]} >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		       else
		       		echo Error    :${array[2]} >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		       fi
		            echo Line/Col :${array[1]} >> ../builds/$BUILD_NUMBER/BuildErrors.txt
			#       echo " " >> ../builds/$BUILD_NUMBER/BuildErrors.txt
		    fi
		    #if [ ${#array[@]} -gt 3 ]; then
			#    for (( i=3 ; i < ${#array[@]} ; i++ ))
			#	do
			#    echo "       ${array[i]}" >> ../builds/$BUILD_NUMBER/BuildErrors.txt
			#	done
		    #fi
	     fi
    fi
fi
done  < ../builds/$BUILD_NUMBER/log

outfile="NoAuthor"
while IFS= read -r line
do
     if [[ "$line" == Author* ]]; then
       IFS=':' read -a array <<< "$line"
       outfile=${array[1]}
       continue
     fi
     echo "$line" >> ../builds/$BUILD_NUMBER/mails/$outfile
done  < ../builds/$BUILD_NUMBER/BuildErrors.txt

echo $(date): Automation : Sending mails to developers.
while read -r line
do
	if ! [ "$line" == "NoAuthor" ] && [ "$BuildErrors" != "No" ]; then
		echo mail to $line
     	mailx -s " $JOB_NAME : Compilation errors (Modified by you)" -c "ashajp@suntecgroup.com,pet_leads@suntecgroup.com,release_helpdesk@suntecgroup.com" "$line@suntecgroup.com" <../builds/$BUILD_NUMBER/mails/$line
	fi
done  < <(ls -1 ../builds/$BUILD_NUMBER/mails)

if [ "$BuildErrors" == "No" ]; then
	if ! [ "$PLSQLErrors" == "No" ]; then
		BuildErrors="$PLSQLErrors"
	fi
else
  	if ! [ "$PLSQLErrors" == "No" ]; then 
  	  echo "$BuildErrors $PLSQLErrors"
		BuildErrors="$BuildErrors $PLSQLErrors"
	fi
fi


cd $WORKSPACE
if [ "$BuildErrors" == "No" ]; then
	#if `grep -i --fixed-strings "Module test passed." "./temp/ModuleTestPassedPMS.txt" > temp/xxxx.txt` ;then	   
		
		cd $WORKSPACE
		/usr/bin/git tag -f "$JOB_NAME"_DELTA $headCommit			
		echo $headCommit >../builds/$BUILD_NUMBER/headCommit		
		cd $WORKSPACE
		
		
		dateString=`date +%Y-%m-%d`		
		echo " pack folders created in target server"			
		cd $WORKSPACE/$deltaPackFolder			
		var2=$patchID"_"		
		var1=`ssh jenkins1@$releaseServer ls -d $JOB_NAME/Draft/PMS_TESTING_PACK/$var2*|sort -r 2>&1 | (head -n1)`
		#var3="${var1/$var2/}"			
		#var4=${var3:1:3}
		var4=${var1: -13:3}			
		var5=`expr $var4 + 1`
		printf -v var6 "%03d" $var5
		dat=`date +"%m-%d-%y"`
		var7=$var2"R"$var6"["$dat"]"
		var8=$var2"R"$var6
		ssh jenkins1@$releaseServer mkdir -p $JOB_NAME/Draft/PMS_TESTING_PACK/"$var7"
		scp -p -r "$patchID".zip jenkins1@$releaseServer:$JOB_NAME/Draft/PMS_TESTING_PACK/"$var7"/"$var7".zip
		
		cd $WORKSPACE/$basePackFolder			
		ssh jenkins1@$releaseServer mkdir -p $JOB_NAME/Draft/ST_PACK/$var7
		scp -p -r "$patchID".zip jenkins1@$releaseServer:$JOB_NAME/Draft/ST_PACK/"$var7"/"$patchID".zip	
		
		cd $WORKSPACE
		#cp $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/ReleaseMail.txt ../builds/$BUILD_NUMBER/mails/
		#sed -i "/@listPms@/r ./temp/ModuleTestPassedPMS.txt" ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		#sed -i '/@listPms@/d' ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		
		##############
		
		sed -i "/PMS_TESTING_PACK/d" ./temp/ModuleTestPassedPMS.txt
		sed -i "/ST_PACK/d" ./temp/ModuleTestPassedPMS.txt
		cp $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/ReleaseMail.txt ../builds/$BUILD_NUMBER/mails/
		sed -i "/@listPms@/r ./temp/ModuleTestPassedPMS.txt" ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		sed -i '/@listPms@/d' ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt		
		sed -i "s/Project/$JOB_NAME/" ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		sed -i "s/PackName/ST_PACK/" ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		sed -i "s/xactPath/$var7/" ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		sed -i "/Status/d" ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt		
		#sed -i "/PMS_TESTING_PACK/d" ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		#sed -i "/ST_PACK/d" ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		#sed -i "/So Please/i \All of the PMS's in this Patch plan is in MTP status." ../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
			
		
		##############
		
		MailAdress="";
		IFS=',' read -a array <<< "$ReleaseMail"
	    for element in "${array[@]}"
		do
			MailAdress="$MailAdress""$element@suntecgroup.com "
		done
		echo mailing release note to $MailAdress
		mailx -s " $JOB_NAME : Release for PMS test" $MailAdress <../builds/$BUILD_NUMBER/mails/ReleaseMail.txt
		echo $(date): Automation : Promoting PMS in status 'Module test passed'
		java -Xms50M -Xmx200M -jar $HOME/pmsTest/PromotePMS.jar $JENKINS_HOME/pmsTest/$pmsConfig $pmsList >temp/PromotePMS.txt
	#else
		#echo " No PMS is Module test passed. So its going to exit"
		#MailAdress="";
		#IFS=',' read -a array <<< "$ReleaseMail"
	    #for element in "${array[@]}"
		#do
			#MailAdress="$MailAdress""$element@suntecgroup.com "
		#done
		#cp $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/BuildFailedMail.txt ../builds/$BUILD_NUMBER/mails/
		#echo mailing release note to $MailAdress
		#mailx -s " $JOB_NAME : Build Suspended" $MailAdress <../builds/$BUILD_NUMBER/mails/BuildFailedMail.txt
		#exit 1
	#fi
	
	echo $(date): Build is successfull.
	MailAdress="";
	IFS=',' read -a array <<< "$BuildFailMail"
    for element in "${array[@]}"
	do
		MailAdress="$MailAdress""$element@suntecgroup.com "
	done
	
	echo mailing build succes to $MailAdress
	cp $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/BuildSuccessMail.txt ../builds/$BUILD_NUMBER/mails/
	mailx -s " $JOB_NAME : Build success" $MailAdress <../builds/$BUILD_NUMBER/mails/BuildSuccessMail.txt
else
	echo $(date): Build errors exists.
	cp $JENKINS_HOME/jenkinscripts/scripts/Xelerate_2x/BuildErrorMail.txt ../builds/$BUILD_NUMBER/mails/
	sed -i "/@BuildErrors@/r  ../builds/$BUILD_NUMBER/BuildErrors.txt" ../builds/$BUILD_NUMBER/mails/BuildErrorMail.txt
	echo buildError : $BuildErrors
	sed -i "s/@BuildErrors@/$BuildErrors/"  ../builds/$BUILD_NUMBER/mails/BuildErrorMail.txt
	
	MailAdress="";
	IFS=',' read -a array <<< "$BuildFailMail"
    for element in "${array[@]}"
	do
		MailAdress="$MailAdress""$element@suntecgroup.com "
	done
	echo mailing build erros to $MailAdress
	mailx -s " $JOB_NAME : Compilation errors (full set)" $MailAdress <../builds/$BUILD_NUMBER/mails/BuildErrorMail.txt
	echo " Build error exists , So the build gets failed."
	MailAdress="";
	IFS=',' read -a array <<< "$ReleaseMail"
    for element in "${array[@]}"
	do
		MailAdress="$MailAdress""$element@suntecgroup.com "
	done
	echo " Build error exists , So the build gets failed."
	exit 1
fi


